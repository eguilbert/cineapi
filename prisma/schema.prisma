generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "orderByRelation", "orderByAggregateGroup", "multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

// Sch√©ma de l'app (public)
model Film {
  id           Int        @id @default(autoincrement())
  tmdbId       Int        @unique
  title        String
  genre        String
  category     String?
  synopsis     String?
  releaseDate  DateTime?
  duration     Int?
  budget       Int?
  origin       String?
  posterUrl    String?
  commentaire  String?
  rating       Float?
  actors       String?
  keywords     String?
  trailerUrl   String?
  filmTags     FilmFilmTag[]
  seances      Int    @default(1)

  productionCountries FilmCountry[]
  director            Director?  @relation(fields: [directorId], references: [id])
  directorId          Int?

  selections     SelectionFilm[]
  votes          Vote[]    @relation("FilmVotes")
  programmations Programmation[]
  awards         Award[]
  externalLinks  ExternalLink[]

  @@schema("public")
}

model Selection {
  id       Int      @id @default(autoincrement())
  name     String
  date     DateTime @default(now())
  films    SelectionFilm[]

  @@schema("public")
}

model SelectionFilm {
  id           Int      @id @default(autoincrement())
  film         Film     @relation(fields: [filmId], references: [id])
  filmId       Int
  selection    Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  selectionId  Int
  commentaire  String?
  note         Int?
  category     String?

  @@unique([filmId, selectionId])
  @@schema("public")
}

model Director {
  id    Int    @id @default(autoincrement())
  name  String @unique
  films Film[]

  @@schema("public")
}

model Country {
  id    Int    @id @default(autoincrement())
  name  String @unique
  films FilmCountry[]

  @@schema("public")
}

model FilmCountry {
  film      Film    @relation(fields: [filmId], references: [id])
  filmId    Int
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int

  @@id([filmId, countryId])
  @@schema("public")
}

model Programmation {
  id        Int      @id @default(autoincrement())
  jour      String
  heure     String
  salle     String
  film      Film     @relation(fields: [filmId], references: [id])
  filmId    Int
  createdAt DateTime @default(now())

  @@schema("public")
}

model FilmTag {
  id         Int      @id @default(autoincrement())
  label      String   @unique
  category   String
  validated  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  films      FilmFilmTag[]

  @@schema("public")
}

model FilmFilmTag {
  id       Int      @id @default(autoincrement())
  filmId   Int
  tagId    Int
  film     Film     @relation(fields: [filmId], references: [id], onDelete: Cascade)
  tag      FilmTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([filmId, tagId], name: "filmId_tagId")
  @@schema("public")
}

model Award {
  id       Int    @id @default(autoincrement())
  prize    String
  festival String
  year     Int?
  film     Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId   Int

  @@schema("public")
}

model ExternalLink {
  id     Int    @id @default(autoincrement())
  url    String
  label  String
  film   Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)
  filmId Int

  @@schema("public")
}

model Cinema {
  id     Int           @id @default(autoincrement())
  name   String
  slug   String        @unique
  users  UserProfile[]
  votes  Vote[]

  @@schema("public")
}

model UserProfile {
  user_id    String   @id // UUID Supabase
  cinema     Cinema   @relation(fields: [cinemaId], references: [id])
  cinemaId   Int
  role       String?  @default("INVITE")
  user_votes Vote[]   @relation("UserVotes")

  @@index([cinemaId])
  @@schema("public")
}

model Vote {
  id          Int      @id @default(autoincrement())
  user_id     String
  film        Film     @relation("FilmVotes", fields: [filmId], references: [id])
  filmId      Int
  note        Int
  commentaire String?
  cinema      Cinema   @relation(fields: [cinemaId], references: [id])
  cinemaId    Int
  createdAt   DateTime @default(now())

  user_profile UserProfile? @relation("UserVotes", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, filmId])
  @@schema("public")
}


