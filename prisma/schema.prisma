generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "multiSchema", "orderByAggregateGroup", "orderByRelation"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

model Film {
  id                  Int             @id @default(autoincrement())
  tmdbId              Int             @unique
  title               String
  genre               String
  category            String?
  synopsis            String?
  releaseDate         DateTime?
  duration            Int?
  budget              Int?
  origin              String?
  posterUrl           String?
  commentaire         String?
  rating              Float?
  actors              String?
  keywords            String?
  trailerUrl          String?
  seances             Int             @default(1)
  directorId          Int?
  awards              Award[]
  externalLinks       ExternalLink[]
  director            Director?       @relation(fields: [directorId], references: [id])
  productionCountries FilmCountry[]
  filmTags            FilmFilmTag[]
  programmations      Programmation[]
  selections          SelectionFilm[]
  votes               Vote[]          @relation("FilmVotes")
  interests           Interest[]

  @@schema("public")
}

model Selection {
  id    Int             @id @default(autoincrement())
  name  String
  date  DateTime        @default(now())
  films SelectionFilm[]

  @@schema("public")
}

model SelectionFilm {
  id          Int       @id @default(autoincrement())
  filmId      Int
  selectionId Int
  commentaire String?
  note        Int?
  category    String?
  film        Film      @relation(fields: [filmId], references: [id])
  selection   Selection @relation(fields: [selectionId], references: [id], onDelete: Cascade)

  @@unique([filmId, selectionId])
  @@schema("public")
}

model Director {
  id    Int    @id @default(autoincrement())
  name  String @unique
  films Film[]

  @@schema("public")
}

model Country {
  id    Int           @id @default(autoincrement())
  name  String        @unique
  films FilmCountry[]

  @@schema("public")
}

model FilmCountry {
  filmId    Int
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])
  film      Film    @relation(fields: [filmId], references: [id])

  @@id([filmId, countryId])
  @@schema("public")
}

model Programmation {
  id        Int      @id @default(autoincrement())
  jour      String
  heure     String
  salle     String
  filmId    Int
  createdAt DateTime @default(now())
  film      Film     @relation(fields: [filmId], references: [id])

  @@schema("public")
}

model FilmTag {
  id        Int           @id @default(autoincrement())
  label     String        @unique
  category  String
  validated Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  films     FilmFilmTag[]

  @@schema("public")
}

model FilmFilmTag {
  id     Int     @id @default(autoincrement())
  filmId Int
  tagId  Int
  film   Film    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  tag    FilmTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([filmId, tagId], name: "filmId_tagId")
  @@schema("public")
}

model Award {
  id       Int    @id @default(autoincrement())
  prize    String
  festival String
  year     Int?
  filmId   Int
  film     Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model ExternalLink {
  id     Int    @id @default(autoincrement())
  url    String
  label  String
  filmId Int
  film   Film   @relation(fields: [filmId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model Cinema {
  id    Int           @id @default(autoincrement())
  name  String
  slug  String        @unique
  users UserProfile[]
  votes Vote[]

  @@schema("public")
}

model UserProfile {
  user_id    String     @id
  cinemaId   Int?       // âœ… optionnel
  role       String?    @default("INVITE")
  username   String
  cinema     Cinema?    @relation(fields: [cinemaId], references: [id]) // âœ… aussi optionnelle
  user_votes Vote[]     @relation("UserVotes")
  interests  Interest[]

  @@index([cinemaId])
  @@schema("public")
}

model Vote {
  id           Int         @id @default(autoincrement())
  user_id      String
  filmId       Int
  note         Int
  commentaire  String?
  cinemaId     Int
  createdAt    DateTime    @default(now())
  cinema       Cinema      @relation(fields: [cinemaId], references: [id])
  film         Film        @relation("FilmVotes", fields: [filmId], references: [id])
  user_profile UserProfile @relation("UserVotes", fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, filmId])
  @@schema("public")
}

model Interest {
  id        String        @id @default(uuid())
  user_id   String
  film_id   Int
  value     InterestLevel @default(SANS_OPINION)
  createdAt DateTime      @default(now())

  user UserProfile @relation(fields: [user_id], references: [user_id])
  film Film        @relation(fields: [film_id], references: [id])

  @@unique([user_id, film_id])
  @@schema("public") // ðŸ‘ˆ obligatoire avec multi-schema
}

enum InterestLevel {
  SANS_OPINION
  NOT_INTERESTED
  CURIOUS
  MUST_SEE

  @@schema("public")
}
